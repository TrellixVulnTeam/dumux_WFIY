// $Id:$
/*****************************************************************************
 *   Copyright (C) 2009 by Karin Erbertseder                                 *
 *   Copyright (C) 2009 by Andreas Lauser                                    *
 *   Copyright (C) 2008 by Bernd Flemisch                                    *
 *   Institute of Hydraulic Engineering                                      *
 *   University of Stuttgart, Germany                                        *
 *   email: <givenname>.<name>@iws.uni-stuttgart.de                          *
 *                                                                           *
 *   This program is free software; you can redistribute it and/or modify    *
 *   it under the terms of the GNU General Public License as published by    *
 *   the Free Software Foundation; either version 2 of the License, or       *
 *   (at your option) any later version, as long as this copyright notice    *
 *   is included in its original form.                                       *
 *                                                                           *
 *   This program is distributed WITHOUT ANY WARRANTY.                       *
 *****************************************************************************/
/**
 * \file
 * \brief  Definition of a problem, where the distribution of a therapeutic agent
 * within pulmonary tissue is described
 * \author Karin Erbertseder, Bernd Flemisch
 */
#ifndef DUNE_TISSUE_TUMOR_PROBLEM_HH
#define DUNE_TISSUE_TUMOR_PROBLEM_HH

#include <dune/grid/io/file/dgfparser/dgfug.hh>
#include <dune/grid/io/file/dgfparser/dgfs.hh>
#include <dune/grid/io/file/dgfparser/dgfyasp.hh>

#include <dumux/material/fluids/interstitialfluid_trail.hh>
#include <dumux/boxmodels/1p2c/1p2cboxmodel.hh>

#include "tissue_soilproperties.hh"

namespace Dune
{

template <class TypeTag>
class TissueTumorProblem;

namespace Properties
{
NEW_TYPE_TAG(TissueTumorProblem, INHERITS_FROM(BoxOnePTwoC));

// Set the grid type
SET_PROP(TissueTumorProblem, Grid)
{
#if ENABLE_UG
    typedef Dune::UGGrid<2> type;
#else
    typedef Dune::SGrid<2, 2> type;
    //typedef Dune::YaspGrid<2> type;
#endif
};

// Set the problem property
SET_PROP(TissueTumorProblem, Problem)
{
    typedef Dune::TissueTumorProblem<TTAG(TissueTumorProblem)> type;
};

// Set the wetting phase
SET_TYPE_PROP(TissueTumorProblem, Fluid, Dune::InterstitialFluid_Trail);

// Set the soil properties
SET_PROP(TissueTumorProblem, Soil)
{
private:
    typedef typename GET_PROP_TYPE(TypeTag, PTAG(Grid)) Grid;
    typedef typename GET_PROP_TYPE(TypeTag, PTAG(Scalar)) Scalar;

public:
    typedef Dune::TissueSoil<Grid, Scalar> type;
};

// Disable gravity
SET_BOOL_PROP(TissueTumorProblem, EnableGravity, false);
}


/**
 * \brief  Definition of a problem, where the distribution of a therapeutic agent
 *         within pulmonary tissue is described
 *
 * The model domain is 22 mm long in x-direction and in y-direction with a discretization length of 0.1
 * mm. The tumour area is located in the middle of the model domain. The diameter of the tumour is
 * assumed to be 2 mm.
 *
 * The intercapillary distance is in the range of 0.1 mm. So the distance between the grid nodes is
 * equal to the intercapillary distance. It is assumed that at each node within the model domain the
 * transition of the therapeutic agent from the blood capillary into the tissue can take place.
 * Based on this assumption, the initial conditions are adapted. The mole fraction of the dissolved
 * therapeutic agent x is set to 1.1249 e-8 within the normal pulmonary tissue. Within the tumour the
 * mole fraction of dissolved therapeutic agent is set to zero due to the assumption of a blood vessel
 * free tumour. As initial condition for the pressure p, an interstitial fluid pressure of -1067 Pa is
 * assumed. This value corresponds to the interstitial fluid pressure in healthy pulmonary tissue.
 *
 * All four sides of the model domain are described by Dirichlet boundary conditions. The primary
 * variable p is instantiated with the value -1067 Pa and the primary variable x with the value
 * 1.1249 e-8.
 *
 * The pressure field of the tumour is generated by an additional source term of 1.98 e-9 l/h,
 * that is set in the center of the tumour region.
 */

template <class TypeTag = TTAG(TissueTumorProblem) >
class TissueTumorProblem : public OnePTwoCBoxProblem<TypeTag, TissueTumorProblem<TypeTag> >
{
    typedef TissueTumorProblem<TypeTag>           ThisType;
    typedef OnePTwoCBoxProblem<TypeTag, ThisType> ParentType;

    typedef typename GET_PROP_TYPE(TypeTag, PTAG(GridView))   GridView;
    typedef typename GET_PROP_TYPE(TypeTag, PTAG(Scalar))     Scalar;

    // copy some indices for convenience
    typedef typename GET_PROP_TYPE(TypeTag, PTAG(OnePTwoCIndices)) Indices;
    enum {
        // Grid and world dimension
        dim         = GridView::dimension,
        dimWorld    = GridView::dimensionworld,

        // indices of the primary variables
        konti      		 = Indices::konti,
        transport        = Indices::transport,
    };

    typedef typename GET_PROP(TypeTag, PTAG(SolutionTypes)) SolutionTypes;
    typedef typename SolutionTypes::PrimaryVarVector        PrimaryVarVector;
    typedef typename SolutionTypes::BoundaryTypeVector      BoundaryTypeVector;

    typedef typename GridView::template Codim<0>::Entity        Element;
    typedef typename GridView::template Codim<dim>::Entity      Vertex;
    typedef typename GridView::IntersectionIterator             IntersectionIterator;

    typedef typename GET_PROP_TYPE(TypeTag, PTAG(FVElementGeometry)) FVElementGeometry;

    typedef Dune::FieldVector<Scalar, dim>       LocalPosition;
    typedef Dune::FieldVector<Scalar, dimWorld>  GlobalPosition;

public:
    TissueTumorProblem(const GridView &gridView)
        : ParentType(gridView)
    {
    }

    /*!
     * \name Problem parameters
     */
    // \{

    /*!
     * \brief The problem name.
     *
     * This is used as a prefix for files generated by the simulation.
     */
    const char *name() const
    { return "tissue"; }

    /*!
     * \brief Returns the temperature within the domain.
     *
     * This problem assumes a temperature of 36 degrees Celsius.
     */
    Scalar temperature() const
    {
        return 273.15 + 36; // in [K]
    };

    // \}

    /*!
     * \name Boundary conditions
     */
    // \{

    /*!
     * \brief Specifies which kind of boundary condition should be
     *        used for which equation on a given boundary segment.
     */
    void boundaryTypes(BoundaryTypeVector         &values,
                       const Element              &element,
                       const FVElementGeometry    &fvElemGeom,
                       const IntersectionIterator &isIt,
                       int                         scvIdx,
                       int                         boundaryFaceIdx) const
    {
        //const GlobalPosition &globalPos = element.geometry().corner(scvIdx);

        //if (globalPos[0] > 22 - eps_)
            values = BoundaryConditions::dirichlet;
        //else
        //    values = BoundaryConditions::neumann;
    }

    /*!
     * \brief Evaluate the boundary conditions for a dirichlet
     *        boundary segment.
     *
     * For this method, the \a values parameter stores primary variables.
     */
    void dirichlet(PrimaryVarVector           &values,
                   const Element              &element,
                   const FVElementGeometry    &fvElemGeom,
                   const IntersectionIterator &isIt,
                   int                         scvIdx,
                   int                         boundaryFaceIdx) const
    {
        const GlobalPosition &globalPos
            = element.geometry().corner(scvIdx);

        initial_(values, globalPos);
    }

    /*!
     * \brief Evaluate the boundary conditions for a neumann
     *        boundary segment.
     *
     * For this method, the \a values parameter stores the mass flux
     * in normal direction of each component. Negative values mean
     * influx.
     */
    void neumann(PrimaryVarVector           &values,
                 const Element              &element,
                 const FVElementGeometry    &fvElemGeom,
                 const IntersectionIterator &isIt,
                 int                         scvIdx,
                 int                         boundaryFaceIdx) const
    {
        const GlobalPosition &globalPos
            = element.geometry().corner(scvIdx);
        values = 0;

        //Scalar lambda = (globalPos[1])/height_;
        if (globalPos[0] < eps_ ) {
        	values[konti] = -3.8676e-8;
            values[transport] = -4.35064e-10;
        }
    }

    // \}

    /*!
     * \name Volume terms
     */
    // \{

    /*!
     * \brief Evaluate the source term for all phases within a given
     *        sub-control-volume.
     *
     * For this method, the \a values parameter stores the rate mass
     * of a component is generated or annihilate per volume
     * unit. Positive values mean that mass is created, negative ones
     * mean that it vanishes.
     */
    void source(PrimaryVarVector        &values,
                const Element           &element,
                const FVElementGeometry &fvElemGeom,
                int                      scvIdx) const
    {
    	 const GlobalPosition &globalPos
    	            = element.geometry().corner(scvIdx);

        values = Scalar(0.0);

        if(globalPos[0]>10 && globalPos[0]<12 && globalPos[1]>10 && globalPos[1]<12)
        	values[0]= 1.5e-6;
    }

    /*!
     * \brief Evaluate the initial value for a control volume.
     *
     * For this method, the \a values parameter stores primary
     * variables.
     */
    void initial(PrimaryVarVector        &values,
                 const Element           &element,
                 const FVElementGeometry &fvElemGeom,
                 int                      scvIdx) const
    {
        const GlobalPosition &globalPos
            = element.geometry().corner(scvIdx);

        initial_(values, globalPos);
    }

    // \}

private:
    // the internal method for the initial condition
    void initial_(PrimaryVarVector       &values,
                  const GlobalPosition   &globalPos) const
    {

        values[konti] = -1067;  			//initial condition for the pressure
        values[transport] = 1.1249e-8;   	//initial condition for the molefraction

    }

    static const Scalar eps_ = 1e-6;
}; //end namespace
}
#endif
