// -*- mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// vi: set et ts=4 sw=4 sts=4:
/*****************************************************************************
 *   See the file COPYING for full copying permissions.                      *
 *                                                                           *
 *   This program is free software: you can redistribute it and/or modify    *
 *   it under the terms of the GNU General Public License as published by    *
 *   the Free Software Foundation, either version 3 of the License, or       *
 *   (at your option) any later version.                                     *
 *                                                                           *
 *   This program is distributed in the hope that it will be useful,         *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            *
 *   GNU General Public License for more details.                            *
 *                                                                           *
 *   You should have received a copy of the GNU General Public License       *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
 *****************************************************************************/
/*!
 * \file
 *
 * \brief A test problem for the one-phase blood flow model:
 * Blood is flowing through a 1d network grid.
 */
#ifndef DUMUX_TEST_1D3D_MICROVESSEL_BLOOD_FLOW_PROBLEM_HH
#define DUMUX_TEST_1D3D_MICROVESSEL_BLOOD_FLOW_PROBLEM_HH

#include <algorithm>
#include <numeric>

#include <dumux/common/parameters.hh>
#include <dumux/common/properties.hh>

#include <dumux/porousmediumflow/problem.hh>

namespace Dumux {

/*!
 * \ingroup OnePTests
 * \brief Exact solution 1D-3D
 */
template <class TypeTag>
class BloodFlowProblem : public PorousMediumFlowProblem<TypeTag>
{
    using ParentType = PorousMediumFlowProblem<TypeTag>;
    using Scalar = GetPropType<TypeTag, Properties::Scalar>;
    using VolumeVariables = GetPropType<TypeTag, Properties::VolumeVariables>;
    using Indices = typename GetPropType<TypeTag, Properties::ModelTraits>::Indices;
    using PrimaryVariables = typename VolumeVariables::PrimaryVariables;
    using ResidualVector = GetPropType<TypeTag, Properties::NumEqVector>;
    using BoundaryTypes = GetPropType<TypeTag, Properties::BoundaryTypes>;
    using GridGeometry = GetPropType<TypeTag, Properties::GridGeometry>;
    using FVElementGeometry = typename GridGeometry::LocalView;
    using SubControlVolume = typename GridGeometry::SubControlVolume;
    using SubControlVolumeFace = typename GridGeometry::SubControlVolumeFace;
    using Element = typename GridGeometry::GridView::template Codim<0>::Entity;
    using GlobalPosition = typename Element::Geometry::GlobalCoordinate;
    using PointSource = GetPropType<TypeTag, Properties::PointSource>;
    using CouplingManager = GetPropType<TypeTag, Properties::CouplingManager>;

public:
    template<class GridData>
    BloodFlowProblem(std::shared_ptr<const GridGeometry> gridGeometry,
                     std::shared_ptr<CouplingManager> couplingManager,
                     std::shared_ptr<GridData> gridData,
                     const std::string& paramGroup = "")
    : ParentType(gridGeometry, paramGroup)
    , couplingManager_(couplingManager)
    {
        //read parameters from input file
        name_ = getParam<std::string>("Problem.Name") + "_1d";
        pressureInlet_ = getParam<Scalar>("BoundaryConditions1D.PressureInput");
        pressureDrop_ = getParam<Scalar>("BoundaryConditions1D.DeltaPressure");
        filtrationCoeff_ = getParam<Scalar>("VesselWall.FiltrationCoefficient");

        this->spatialParams().readGridParams(*gridData);

        // mapping from element index to boundaryFlag
        setBoundaryDomainMarker_(*gridData);
    }

    /*!
     * \brief Return how much the domain is extruded at a given sub-control volume.
     *
     * The extrusion factor here makes extrudes the 1d line to a circular tube with
     * cross-section area pi*r^2.
     */
    template<class ElementSolution>
    Scalar extrusionFactor(const Element &element,
                           const SubControlVolume &scv,
                           const ElementSolution& elemSol) const
    {
        const auto eIdx = this->gridGeometry().elementMapper().index(element);
        const auto radius = this->spatialParams().radius(eIdx);
        return M_PI*radius*radius;
    }

    /*!
     * \name Problem parameters
     */
    // \{

    /*!
     * \brief The problem name.
     *
     * This is used as a prefix for files generated by the simulation.
     */
    const std::string& name() const
    { return name_; }

    /*!
     * \brief Return the temperature within the domain in [K].
     *
     */
    Scalar temperature() const
    { return 273.15 + 37.0; } // body temperature

    // \}
    /*!
     * \name Boundary conditions
     */
    // \{

   /*!
     * \brief Specifies which kind of boundary condition should be
     *        used for which equation on a given boundary segment.
     *
     * \param globalPos The global position
     */
    BoundaryTypes boundaryTypes(const Element &element,
                                const SubControlVolumeFace& scvf) const
    {
        BoundaryTypes bcTypes;
        bcTypes.setAllDirichlet();

        switch (boundaryDomainMarker_[scvf.insideScvIdx()])
        {
            case 1: // inflow boundaries
                bcTypes.setNeumann(Indices::pressureIdx);
                break;
            case 2: // outflow boundaries
                bcTypes.setDirichlet(Indices::pressureIdx);
                break;
            default:
                DUNE_THROW(Dune::InvalidStateException,
                             "Unknown boundary marker for element " << scvf.insideScvIdx());
        }

        return bcTypes;
    }

    /*!
      * \brief Specifies which kind of boundary condition should be
      *        used for which equation on a given boundary segment.
      *
      * \param globalPos The global position
      */
    BoundaryTypes boundaryTypes(const Element &element,
                                const SubControlVolume& scv) const
    {
        BoundaryTypes bcTypes;
        bcTypes.setAllDirichlet();

        switch (boundaryDomainMarker_[scv.elementIndex()])
        {
            case 1: // inflow boundaries
                bcTypes.setNeumann(Indices::pressureIdx);
                break;
            case 2: // outflow boundaries
                bcTypes.setDirichlet(Indices::pressureIdx);
                break;
            default:
                DUNE_THROW(Dune::InvalidStateException,
                             "Unknown boundary marker for element " << scv.elementIndex());
        }

        return bcTypes;
    }

    /*!
     * \brief Evaluate the boundary conditions for a dirichlet
     *        control volume.
     */
    PrimaryVariables dirichletAtPos(const GlobalPosition& globalPos) const
    {
        PrimaryVariables values(0.0);
        values[Indices::pressureIdx] = pressureInlet_ - pressureDrop_;
        return values;
    }

    /*!
     * \brief Evaluate the boundary conditions for a neumann
     *        boundary segment.
     *
     * Negative values mean influx.
     */
    template<class ElementVolumeVariables, class ElementFluxVarsCache>
    ResidualVector neumann(const Element& element,
                           const FVElementGeometry& fvGeometry,
                           const ElementVolumeVariables& elemVolVars,
                           const ElementFluxVarsCache& cache,
                           const SubControlVolumeFace& scvf) const
    {
        ResidualVector values(0.0);
        const auto vel = this->spatialParams().velocityEstimate(scvf.insideScvIdx());
        values[Indices::conti0EqIdx] = -vel*elemVolVars[scvf.insideScvIdx()].density();
        return values;
    }


    // \}

    /*!
     * \name Volume terms
     */
    // \{

     /*!
     * \brief Applies a vector of point sources. The point sources
     *        are possibly solution dependent.
     */
    void addPointSources(std::vector<PointSource>& pointSources) const
    { pointSources = this->couplingManager().lowDimPointSources(); }

    /*!
     * \brief Evaluate the point sources (added by addPointSources)
     *        for all phases within a given sub-control-volume.
     *
     * For this method, the \a values() method of the point sources returns
     * the absolute rate mass generated or annihilate in kg/s. Positive values mean
     * that mass is created, negative ones mean that it vanishes.
     */
    template<class ElementVolumeVariables>
    void pointSource(PointSource& source,
                     const Element &element,
                     const FVElementGeometry& fvGeometry,
                     const ElementVolumeVariables& elemVolVars,
                     const SubControlVolume &scv) const
    {

        // compute source at every integration point
        const Scalar pressure1D = this->couplingManager().lowDimPriVars(source.id())[Indices::pressureIdx];
        const Scalar pressure3D = this->couplingManager().bulkPriVars(source.id())[Indices::pressureIdx];

        // correct the pressures by a constant oncotic / osmotic pressure
        static constexpr Scalar pOsmotic3D = 666.0; // -5mmHg
        static constexpr Scalar pOsmotic1D = 3300.0; // -25mmHg

        // calculate the source
        const Scalar meanRho = 1030;
        const auto lowDimElementIdx = this->couplingManager().pointSourceData(source.id()).lowDimElementIdx();
        const Scalar radius = this->spatialParams().radius(lowDimElementIdx);
        const auto liquidSource = 2*M_PI*radius*filtrationCoeff_*(pressure3D - pOsmotic3D - pressure1D + pOsmotic1D) * meanRho;

        source = liquidSource*source.quadratureWeight()*source.integrationElement();
    }

    /*!
     * \brief Evaluate the initial value for a control volume.
     *
     * For this method, the \a priVars parameter stores primary
     * variables.
     */
    PrimaryVariables initialAtPos(const GlobalPosition &globalPos) const
    { return PrimaryVariables({1.0e5}); }

    // \}

    //! Called after every time step
    //! Output the total global exchange term
    template<class VelocityVector, class SolutionVector, class GridVariables>
    std::vector<Scalar> extravasationProbability(const VelocityVector& velocity, const SolutionVector& sol, const GridVariables& gridVars)
    {
        std::vector<Scalar> probability(this->gridGeometry().gridView().size(0));
        for (const auto& element : elements(this->gridGeometry().gridView()))
        {
            const auto eIdx = this->gridGeometry().elementMapper().index(element);

            auto fvGeometry = localView(this->gridGeometry());
            fvGeometry.bindElement(element);

            auto elemVolVars = localView(gridVars.curGridVolVars());
            elemVolVars.bindElement(element, fvGeometry, sol);

            for (const auto& scv : scvs(fvGeometry))
            {
                auto extravasationFlux = this->scvPointSources(element, fvGeometry, elemVolVars, scv);
                extravasationFlux *= scv.volume()*elemVolVars[scv].extrusionFactor();

                auto intravascularFlux = velocity[eIdx].two_norm();
                intravascularFlux *= elemVolVars[scv].extrusionFactor()*1030;

                probability[eIdx] = extravasationFlux/intravascularFlux;
            }
        }
        return probability;
    }

    //! Set the coupling manager
    void setCouplingManager(std::shared_ptr<CouplingManager> cm)
    { couplingManager_ = cm; }

    //! Get the coupling manager
    const CouplingManager& couplingManager() const
    { return *couplingManager_; }

private:
    template<class GridData>
    void setBoundaryDomainMarker_(const GridData& gridData)
    {
        const auto& gg = this->gridGeometry();
        boundaryDomainMarker_.resize(gg.gridView().size(0));

        for (const auto& element : elements(gg.gridView()))
        {
            if (!element.hasBoundaryIntersections())
                continue;

            auto ancestor = element;
            while (ancestor.hasFather())
                ancestor = ancestor.father();

            for (const auto& intersection : intersections(gg.gridView().grid().levelGridView(0), ancestor))
            {
                if (intersection.boundary())
                {
                    const auto vertex = ancestor.template subEntity<1>(intersection.indexInInside());
                    boundaryDomainMarker_[gg.elementMapper().index(element)] = gridData.parameters(vertex)[0];
                }
            }
        }
    }

    static constexpr Scalar eps_ = 1.5e-7;
    std::string name_;
    Scalar pressureInlet_, pressureDrop_, filtrationCoeff_;
    std::vector<int> boundaryDomainMarker_;
    std::shared_ptr<CouplingManager> couplingManager_;
};

} //end namespace Dumux

#endif
