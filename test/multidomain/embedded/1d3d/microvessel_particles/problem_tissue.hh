// -*- mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// vi: set et ts=4 sw=4 sts=4:
/*****************************************************************************
 *   See the file COPYING for full copying permissions.                      *
 *                                                                           *
 *   This program is free software: you can redistribute it and/or modify    *
 *   it under the terms of the GNU General Public License as published by    *
 *   the Free Software Foundation, either version 3 of the License, or       *
 *   (at your option) any later version.                                     *
 *                                                                           *
 *   This program is distributed in the hope that it will be useful,         *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            *
 *   GNU General Public License for more details.                            *
 *                                                                           *
 *   You should have received a copy of the GNU General Public License       *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
 *****************************************************************************/
/**
 * \file
 * \ingroup OnePTests
 */
#ifndef DUMUX_TEST_1D3D_MICROVESSEL_TISSUE_PROBLEM_HH
#define DUMUX_TEST_1D3D_MICROVESSEL_TISSUE_PROBLEM_HH

#include <dumux/common/parameters.hh>
#include <dumux/common/properties.hh>

#include <dumux/porousmediumflow/problem.hh>

namespace Dumux {

/*!
 * \ingroup OnePTests
 */
template <class TypeTag>
class TissueProblem : public PorousMediumFlowProblem<TypeTag>
{
    using ParentType = PorousMediumFlowProblem<TypeTag>;
    using Scalar = GetPropType<TypeTag, Properties::Scalar>;
    using VolumeVariables = GetPropType<TypeTag, Properties::VolumeVariables>;
    using Indices = typename GetPropType<TypeTag, Properties::ModelTraits>::Indices;
    using PrimaryVariables = typename VolumeVariables::PrimaryVariables;
    using BoundaryTypes = GetPropType<TypeTag, Properties::BoundaryTypes>;
    using GridGeometry = GetPropType<TypeTag, Properties::GridGeometry>;
    using FVElementGeometry = typename GridGeometry::LocalView;
    using SubControlVolume = typename GridGeometry::SubControlVolume;
    using SubControlVolumeFace = typename GridGeometry::SubControlVolumeFace;
    using Element = typename GridGeometry::GridView::template Codim<0>::Entity;
    using GlobalPosition = typename Element::Geometry::GlobalCoordinate;
    using PointSource = GetPropType<TypeTag, Properties::PointSource>;
    using CouplingManager = GetPropType<TypeTag, Properties::CouplingManager>;

public:
    TissueProblem(std::shared_ptr<const GridGeometry> gridGeometry,
                  std::shared_ptr<CouplingManager> couplingManager,
                  const std::string& paramGroup = "")
    : ParentType(gridGeometry, paramGroup)
    , couplingManager_(couplingManager)
    {
        //read parameters from input file
        name_ = getParam<std::string>("Problem.Name") + "_3d";
        filtrationCoeff_ = getParam<Scalar>("VesselWall.FiltrationCoefficient");
    }

    /*!
     * \name Problem parameters
     */
    // \{

    /*!
     * \brief The problem name.
     *
     * This is used as a prefix for files generated by the simulation.
     */
    const std::string& name() const
    { return name_; }

    /*!
     * \brief Returns the temperature within the domain [K].
     *
     * This problem assumes a temperature of 37 degrees Celsius.
     */
    Scalar temperature() const
    { return 273.15 + 37; } // in [K]

    // \}

    /*!
     * \name Boundary conditions
     */
    // \{

    /*!
     * \brief Specifies which kind of boundary condition should be
     *        used for which equation on a given boundary segment.
     *
     * \param globalPos The position for which the bc type should be evaluated
     */
    BoundaryTypes boundaryTypesAtPos(const GlobalPosition &globalPos) const
    {
        BoundaryTypes values;
        values.setAllNeumann();
        return values;
    }

    // \}

    /*!
     * \name Volume terms
     */
    // \{

    /*!
     * \brief Applies a vector of point sources. The point sources
     *        are possibly solution dependent.
     *
     * Positive values mean that mass is created, negative ones mean that it vanishes.
     */
    void addPointSources(std::vector<PointSource>& pointSources) const
    {
        pointSources = this->couplingManager().bulkPointSources();
    }

    /*!
     * \brief Evaluate the point sources (added by addPointSources)
     *        for all phases within a given sub-control-volume.
     * For this method, the \a values() method of the point sources returns
     * the absolute rate mass generated or annihilate in kg/s. Positive values mean
     * that mass is created, negative ones mean that it vanishes.
     */
    template<class ElementVolumeVariables>
    void pointSource(PointSource& source,
                     const Element &element,
                     const FVElementGeometry& fvGeometry,
                     const ElementVolumeVariables& elemVolVars,
                     const SubControlVolume &scv) const
    {
        // compute source at every integration point
        const Scalar pressure3D = this->couplingManager().bulkPriVars(source.id())[Indices::pressureIdx];
        const Scalar pressure1D = this->couplingManager().lowDimPriVars(source.id())[Indices::pressureIdx];

        // correct the pressures by a constant oncotic / osmotic pressure
        static constexpr Scalar pOsmotic3D = 666.0; // -5mmHg
        static constexpr Scalar pOsmotic1D = 3300.0; // -25mmHg

        // calculate the source
        const Scalar meanRho = 1030;
        const Scalar radius = this->couplingManager().radius(source.id());
        const Scalar liquidSource = -2*M_PI*radius*filtrationCoeff_*(pressure3D - pOsmotic3D - pressure1D + pOsmotic1D) * meanRho;

        source = liquidSource*source.quadratureWeight()*source.integrationElement();
    }

    /*!
     * \brief Evaluate the initial value for a control volume.
     *
     * \param values The initial values for the primary variables
     * \param globalPos The position for which the initial condition should be evaluated
     *
     * For this method, the \a values parameter stores primary
     * variables.
     */
    PrimaryVariables initialAtPos(const GlobalPosition &globalPos) const
    { return PrimaryVariables({1.0e5 + 933.0}); }

    // //! Called after every time step
    // //! Output the total global exchange term
    // template<class SolutionVector, class GridVariables>
    // void computeSource(const SolutionVector& sol, const GridVariables& gridVars)
    // {
    //     PrimaryVariables netSource(0.0);
    //     PrimaryVariables source(0.0);
    //     for (const auto& element : elements(this->gridGeometry().gridView()))
    //     {
    //         auto fvGeometry = localView(this->gridGeometry());
    //         fvGeometry.bindElement(element);
    //
    //         auto elemVolVars = localView(gridVars.curGridVolVars());
    //         elemVolVars.bindElement(element, fvGeometry, sol);
    //
    //         for (auto&& scv : scvs(fvGeometry))
    //         {
    //             auto pointSources = this->scvPointSources(element, fvGeometry, elemVolVars, scv);
    //             pointSources += this->source(element, fvGeometry, elemVolVars, scv);
    //             pointSources *= scv.volume()*elemVolVars[scv].extrusionFactor();
    //             netSource += pointSources;
    //             if (std::signbit(pointSources[0]))
    //                 source += pointSources;
    //         }
    //     }
    //
    //     std::cout << "Transmural transfer (3D): " << source << '\n';
    //     std::cout << "Net transmural transfer (3D): " << netSource << '\n';
    // }

    //! Set the coupling manager
    void setCouplingManager(std::shared_ptr<CouplingManager> cm)
    { couplingManager_ = cm; }

    //! Get the coupling manager
    const CouplingManager& couplingManager() const
    { return *couplingManager_; }

private:
    static constexpr Scalar eps_ = 1.5e-7;
    std::string name_;
    Scalar filtrationCoeff_;
    std::shared_ptr<CouplingManager> couplingManager_;
};

} //end namespace Dumux

#endif
